// Nextflow params
nextflow.enable.dsl=2

// Singularity params
singularity.enabled    = true
singularity.autoMounts = true
// You can change this to a directory to cache your singularity containers
//singularity.cacheDir = '/tmp/singularity_cache' 

// Global default params
params {
  // input samplesheet
	samplesheet = "null"
	
	// output directory
	outdir = "null"
	
	// GPseq defaults
	enzyme = "DpnII"
	cutsite = "GATC"
	pattern = "umi8bc8cs4"
    
    // Reference genome options
    genome = null
    igenomes_base = "s3://ngi-igenomes/igenomes/"
    //igenomes_base = "/mnt/data/seq_resources/igenomes/"
    igenomes_ignore = false
    
    //fasta = "/mnt/AchTeraD/Documents/references/mm10/mm10.fa" // Change this to the path of your reference
	//bowtie2 = "/mnt/AchTeraD/Documents/references/mm10/" // Change this to the directory where the indexes are
	validationSkipDuplicateCheck = "true"
    validationS3PathCheck = "true"
    
    // Resource options
    // Defaults only, expected to be overwritten
    max_memory = "16.GB"
    max_cpus = 20
    max_time = "24.h"	
}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Load igenomes.config if required
if (!params.igenomes_ignore) {
    includeConfig 'conf/igenomes.config'
} else {
    params.genomes = [:]
}

// Profiles
profiles {
     test { includeConfig 'conf/test.config' }
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}