// Nextflow params
nextflow.enable.dsl=2

// Singularity params
singularity.enabled    = true
singularity.autoMounts = true
singularity.cacheDir = '/mnt/AchTeraD/singularity_cache'

// Global default params
params {
  // input samplesheet
	samplesheet = "samplesheet.csv"
	
	// output directory
	outdir = "results"
	
	// GPseq defaults
	enzyme = "DpnII"
	cutsite = "GATC"
	pattern = "umi8bc8cs4"
	//reference = "s3://ngi-igenomes/igenomes/Homo_sapiens/UCSC/hg38/Sequence/WholeGenomeFasta/genome.fa"
	reference = "/mnt/AchTeraD/Documents/references/mm10/mm10.fa"
	index_dir = "/mnt/AchTeraD/Documents/references/mm10/"
	validationSkipDuplicateCheck = "true"
		
}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'


// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}